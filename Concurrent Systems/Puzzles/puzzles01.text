Alex Gould
9/13/15
30 Minutes
I did not look at any available solutions to any of these exercises.

Rendezvous
----------

You can't have a situation this complicated with only one semaphore. You need to
have one for each thread. Each thread needs to use its semaphore to send a
signal that its first statement is done. Then thread A waits for Thread B's
semaphore and vice-versa. Once the thread has waited for the signal from the
other, it can go ahead and execute Statement 2.

Mutex
-----
Since only one thread should be able to run at a time, we should be able to do
this with only one semaphore. Before incrementing count, each thread needs to
wait for the same semaphore, then after incrementing, each thread needs to
signal the semaphore that it's done. To ensure that both threads don't get stuck
and one is allowed to execute, we need to set the common semaphore to 1 at the
beginning, not 0. This will allow the first to run, but still slam the door shut
behind it.
